<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.Title}} - API Documentation</title>
    <style>
        body {
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          line-height: 1.6;
          color: #333;
          max-width: 1200px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          background-color: #2c3e50;
          color: white;
          padding: 20px;
          border-radius: 5px;
          margin-bottom: 30px;
        }
        .endpoint {
          border: 1px solid #ddd;
          border-radius: 5px;
          padding: 20px;
          margin-bottom: 20px;
          background-color: #f9f9f9;
        }
        .method {
          display: inline-block;
          padding: 5px 10px;
          border-radius: 3px;
          font-weight: bold;
          color: black;
          margin-right: 10px;
        }
        .get { background-color: #3498db; }
        .post { background-color: #2ecc71; }
        .put { background-color: #f39c12; }
        .delete { background-color: #e74c3c; }
        .patch { background-color: #9b59b6; }
        .path {
          font-family: monospace;
          font-size: 1.1em;
        }
        .tab {
          overflow: hidden;
          border: 1px solid #ccc;
          background-color: #f1f1f1;
          border-radius: 5px 5px 0 0;
        }
        .tab button {
          background-color: inherit;
          float: left;
          border: none;
          outline: none;
          cursor: pointer;
          padding: 10px 16px;
          transition: 0.3s;
        }
        .tab button:hover {
          background-color: #ddd;
        }
        .tab button.active {
          background-color: #ddd;
        }
        .tabcontent {
          display: none;
          padding: 15px;
          border: 1px solid #ccc;
          border-top: none;
          border-radius: 0 0 5px 5px;
        }
        pre {
          background-color: #f5f5f5;
          padding: 15px;
          border-radius: 5px;
          overflow-x: auto;
        }
        .try-it {
          background-color: #3498db;
          color: white;
          border: none;
          padding: 8px 15px;
          border-radius: 4px;
          cursor: pointer;
          margin-top: 10px;
        }
        .try-it:hover {
          background-color: #2980b9;
        }
        .response-area {
          margin-top: 20px;
          border: 1px solid #ddd;
          padding: 15px;
          border-radius: 5px;
          background-color: #f5f5f5;
          min-height: 100px;
        }
        .param-table {
          width: 100%;
          border-collapse: collapse;
        }
        .param-table th, .param-table td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        .param-table th {
          background-color: #f2f2f2;
        }
        .param-table tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .param-input {
          margin-bottom: 10px;
        }
        .param-input label {
          display: inline-block;
          width: 150px;
          font-weight: bold;
        }
        .param-input input, .param-input select, .param-input textarea {
          padding: 5px;
          width: 200px;
          border: 1px solid #ddd;
          border-radius: 3px;
        }
        .param-input textarea {
          width: 100%;
          min-height: 60px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>{{.Title}}</h1>
        <p>{{.Description}}</p>
        <p>Base URL: <code>{{.BaseURL}}</code></p>
        <p>Version: {{.Version}}</p>
    </div>

    {{range .Sections}}
    <h2>{{.Name}}</h2>
    <p>{{.Description}}</p>

    {{range .Endpoints}}
    <div class="endpoint">
        <div>
            <span class="method {{.Method}}">{{.Method}}</span>
            <span class="path">{{.Path}}</span>
        </div>
        <p>{{.Description}}</p>

        <div class="tab">
            <button class="tablinks" onclick="openTab(event, 'docs-{{.ID}}')">Description</button>
            <button class="tablinks" onclick="openTab(event, 'try-{{.ID}}')">Try</button>
        </div>

        <div id="docs-{{.ID}}" class="tabcontent" style="display: none;">
            {{if .Parameters}}
            <h3>Parameters</h3>
            <table class="param-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Place</th>
                        <th>Required</th>
                        <th>Description</th>
                        <th>Default</th>
                    </tr>
                </thead>
                <tbody>
                    {{range .Parameters}}
                    <tr>
                        <td><code>{{.Name}}</code></td>
                        <td>{{.Type}}</td>
                        <td>{{.In}}</td>
                        <td>{{if .Required}}Yes{{else}}No{{end}}</td>
                        <td>{{.Description}}</td>
                        <td>{{.Default}}</td>
                    </tr>
                    {{end}}
                </tbody>
            </table>
            {{end}}

            {{if .RequestExample}}
            <h3>Request example</h3>
            <pre><code>{{.RequestExample}}</code></pre>
            {{end}}

            {{if .ResponseExample}}
            <h3>Response example</h3>
            <pre><code>{{.ResponseExample}}</code></pre>
            {{end}}
        </div>

        <div id="try-{{.ID}}" class="tabcontent">
            {{if .Parameters}}
            <h3>Parameters</h3>
            <div id="params-{{.ID}}">
                {{range .Parameters}}
                <div class="param-input">
                    <label for="{{.Name}}">{{.Name}} ({{.In}}):</label>
                    {{if eq .Type "boolean"}}
                    <select id="{{.Name}}">
                        <option value="true" {{if eq .Default "true"}}selected{{end}}>true</option>
                        <option value="false" {{if eq .Default "false"}}selected{{end}}>false</option>
                    </select>
                    {{else if eq .Type "integer"}}
                    <input type="number" id="{{.Name}}" value="{{.Default}}" step="1">
                    {{else if eq .Type "number"}}
                    <input type="number" id="{{.Name}}" value="{{.Default}}">
                    {{else if eq .In "body"}}
                    <textarea id="{{.Name}}">{{.Default}}</textarea>
                    {{else}}
                    <input type="text" id="{{.Name}}" value="{{.Default}}">
                    {{end}}
                </div>
                {{end}}
            </div>
            {{end}}

            <button class="try-it" onclick="tryEndpoint('{{.Method}}', '{{.Path}}', '{{.ID}}')">Try-it</button>
            <div class="response-area" id="response-{{.ID}}">
                <p>Press "Try-it" to see result</p>
            </div>
        </div>
    </div>
    {{end}}
    {{end}}

    <script>
        function openTab(evt, tabName) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(tabName).style.display = "block";
            evt.currentTarget.className += " active";
        }

        function tryEndpoint(method, path, endpointId) {
            const responseArea = document.getElementById(`response-${endpointId}`);
            responseArea.innerHTML = '<p>Sending request...</p>';

            const paramsContainer = document.getElementById(`params-${endpointId}`);
            let queryParams = {};
            let pathParams = {};
            let bodyParams = null;
            let headers = {
                'Content-Type': 'application/json'
            };

            if (paramsContainer) {
                const paramInputs = paramsContainer.querySelectorAll('.param-input');

                paramInputs.forEach(inputDiv => {
                    const label = inputDiv.querySelector('label');
                    const input = inputDiv.querySelector('input, select, textarea');

                    if (!label || !input) return;

                    const labelText = label.textContent;
                    const paramName = labelText.split(' ')[0];
                    const paramIn = labelText.match(/\((.*?)\)/)[1];
                    const paramValue = input.value;

                    if (paramIn === 'query') {
                        queryParams[paramName] = paramValue;
                    } else if (paramIn === 'path') {
                        pathParams[paramName] = paramValue;
                    } else if (paramIn === 'body') {
                        try {
                            bodyParams = JSON.parse(paramValue);
                        } catch (e) {
                            bodyParams = paramValue;
                        }
                    } else if (paramIn === 'header') {
                        headers[paramName] = paramValue;
                    }
                });
            }

            let finalPath = path;
            for (const [key, value] of Object.entries(pathParams)) {
                finalPath = finalPath.replace(`{${key}}`, value);
            }

            let url = `{{.BaseURL}}${finalPath}`;
            const queryString = Object.keys(queryParams)
                .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(queryParams[key])}`)
                .join('&');

            if (queryString) {
                url += (url.includes('?') ? '&' : '?') + queryString;
            }

            const options = {
                method: method,
                headers: headers
            };

            if (bodyParams !== null && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {
                if (typeof bodyParams === 'object') {
                    options.body = JSON.stringify(bodyParams);
                } else {
                    options.body = bodyParams;
                    if (!headers['Content-Type']) {
                        options.headers['Content-Type'] = 'text/plain';
                    }
                }
            }

            fetch(url, options)
                .then(response => {
                    const contentType = response.headers.get('Content-Type');
                    if (contentType?.includes('application/json')) {
                        return response.json();
                    } else {
                        return response.text();
                    }
                })
                .then(data => {
                    if (typeof data === 'object') {
                        responseArea.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;
                    } else {
                        responseArea.innerHTML = `<pre>${data}</pre>`;
                    }
                })
                .catch(error => {
                    responseArea.innerHTML = `<p style="color: red;">Error: ${error.message}</p>`;
                });
        }
    </script>
</body>
</html>
