<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.Title}} - API Documentation</title>
    <style>
        body {
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          line-height: 1.6;
          color: #333;
          max-width: 1200px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          background-color: #2c3e50;
          color: white;
          padding: 20px;
          border-radius: 5px;
          margin-bottom: 30px;
        }
        .endpoint {
          border: 1px solid #ddd;
          border-radius: 5px;
          padding: 20px;
          margin-bottom: 20px;
          background-color: #f9f9f9;
        }
        .method {
          display: inline-block;
          padding: 5px 10px;
          border-radius: 3px;
          font-weight: bold;
          color: black;
          margin-right: 10px;
        }
        .get { background-color: #3498db; }
        .post { background-color: #2ecc71; }
        .put { background-color: #f39c12; }
        .delete { background-color: #e74c3c; }
        .patch { background-color: #9b59b6; }
        .path {
          font-family: monospace;
          font-size: 1.1em;
        }
        .tab {
          overflow: hidden;
          border: 1px solid #ccc;
          background-color: #f1f1f1;
          border-radius: 5px 5px 0 0;
        }
        .tab button {
          background-color: inherit;
          float: left;
          border: none;
          outline: none;
          cursor: pointer;
          padding: 10px 16px;
          transition: 0.3s;
        }
        .tab button:hover {
          background-color: #ddd;
        }
        .tab button.active {
          background-color: #ddd;
        }
        .tabcontent {
          display: none;
          padding: 15px;
          border: 1px solid #ccc;
          border-top: none;
          border-radius: 0 0 5px 5px;
        }
        pre {
          background-color: #f5f5f5;
          padding: 15px;
          border-radius: 5px;
          overflow-x: auto;
        }
        .try-it {
          background-color: #3498db;
          color: white;
          border: none;
          padding: 8px 15px;
          border-radius: 4px;
          cursor: pointer;
          margin-top: 10px;
        }
        .try-it:hover {
          background-color: #2980b9;
        }
        .response-area {
          margin-top: 20px;
          border: 1px solid #ddd;
          padding: 15px;
          border-radius: 5px;
          background-color: #f5f5f5;
          min-height: 100px;
        }
        .param-table {
          width: 100%;
          border-collapse: collapse;
        }
        .param-table th, .param-table td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        .param-table th {
          background-color: #f2f2f2;
        }
        .param-table tr:nth-child(even) {
          background-color: #f9f9f9;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>{{.Title}}</h1>
        <p>{{.Description}}</p>
        <p>Base URL: <code>{{.BaseURL}}</code></p>
        <p>Version: {{.Version}}</p>
    </div>

    {{range .Sections}}
    <h2>{{.Name}}</h2>
    <p>{{.Description}}</p>

    {{range .Endpoints}}
    <div class="endpoint">
        <div>
            <span class="method {{.Method}}">{{.Method}}</span>
            <span class="path">{{.Path}}</span>
        </div>
        <p>{{.Description}}</p>

        <div class="tab">
            <button class="tablinks" onclick="openTab(event, 'docs-{{.ID}}')">Description</button>
            <button class="tablinks" onclick="openTab(event, 'try-{{.ID}}')">Try</button>
        </div>

        <div id="docs-{{.ID}}" class="tabcontent" style="display: none;">
            {{if .Parameters}}
            <h3>Parameters</h3>
            <table class="param-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Place</th>
                        <th>Required</th>
                        <th>Description</th>
                        <th>Default</th>
                    </tr>
                </thead>
                <tbody>
                    {{range .Parameters}}
                    <tr>
                        <td><code>{{.Name}}</code></td>
                        <td>{{.Type}}</td>
                        <td>{{.In}}</td>
                        <td>{{if .Required}}Yes{{else}}No{{end}}</td>
                        <td>{{.Description}}</td>
                        <td>{{.Default}}</td>
                    </tr>
                    {{end}}
                </tbody>
            </table>
            {{end}}

            {{if .RequestExample}}
            <h3>Request example</h3>
            <pre><code>{{.RequestExample}}</code></pre>
            {{end}}

            {{if .ResponseExample}}
            <h3>Response example</h3>
            <pre><code>{{.ResponseExample}}</code></pre>
            {{end}}
        </div>

        <div id="try-{{.ID}}" class="tabcontent">
            <button class="try-it" onclick="tryEndpoint('{{.Method}}', '{{.Path}}', '{{.ID}}')">Try-it</button>
            <div class="response-area" id="response-{{.ID}}">
                <p>Press "Try-it" to see result</p>
            </div>
        </div>
    </div>
    {{end}}
    {{end}}

    <script>
        function openTab(evt, tabName) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(tabName).style.display = "block";
            evt.currentTarget.className += " active";
        }

        function tryEndpoint(method, path, id) {
            const responseArea = document.getElementById(`response-${id}`);
            responseArea.innerHTML = '<p>Sending...</p>';

            fetch(`{{.BaseURL}}${path}`, {
                method: method,
                headers: {
                    'Content-Type': 'text/plain',
                },
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response;
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const contentType = response.headers.get('Content-Type');

                if (contentType?.includes('application/json')) {
                    return response.json(); // парсим JSON
                } else {
                    return response.text(); // или получаем текст
                }
            })
            .then(data => {
                if (typeof data === 'object') {
                    responseArea.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;
                } else {
                    responseArea.innerHTML = `<pre>${data}</pre>`;
                }
            })
            .catch(error => {
                responseArea.innerHTML = `<p style="color: red;">Ошибка: ${error.message}</p>`;
            });
        }
    </script>
</body>
</html>
